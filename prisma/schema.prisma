// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  businessName  String?
  accounts      Account[]
  sessions      Session[]
  offers        Offer[]
  customers     Customer[]
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  businessName String?

  @@unique([identifier, token])
}

model Offer {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  duration    Int
  imageUrl    String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  currency    String
  offerLimit  Int
  features    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                   String            @id @default(cuid())
  userId               String            @unique
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId               String
  plan                 SubscriptionPlan  @relation(fields: [planId], references: [id])
  status               String            @default("inactive")
  stripeCustomerId     String?           @unique
  stripeSubscriptionId String?           @unique
  currentPeriodEnd     DateTime?
  additionalOffers     Int               @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}
